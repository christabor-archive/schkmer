// Generated by CoffeeScript 1.9.3
(function() {
  var ColorSection, ColorSectionAnalagous, ColorSectionComplementary, ColorSectionGrayScale, ColorSectionPlain, ColorSectionTriadic,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ColorSection = (function() {
    var BRIGHTNESS_AMT, DESATURATION_AMT, SUBDUE_AMT, self;

    self = ColorSection;

    BRIGHTNESS_AMT = 40;

    DESATURATION_AMT = 30;

    SUBDUE_AMT = 6;

    function ColorSection(base1, dark, root1) {
      this.base = base1;
      this.dark = dark;
      this.root = root1;
      this.$root = $(root);
      this.colors = {
        bg: '',
        fg: '',
        highlight: '',
        interactive: ''
      };
    }

    ColorSection.prototype.applyColors = function() {
      return console.log('applying...');
    };

    ColorSection.prototype.genSwatches = function() {
      return self.colors;
    };

    ColorSection.prototype.exportCSS = function() {
      return console.log('exporting css...');
    };

    ColorSection.prototype.addEvents = function() {
      return self.$root.on('click', function() {
        return self.exportCSS();
      });
    };

    return ColorSection;

  })();

  ColorSectionAnalagous = (function(superClass) {
    extend(ColorSectionAnalagous, superClass);

    function ColorSectionAnalagous() {
      throw new Error('Not implemented');
    }

    return ColorSectionAnalagous;

  })(ColorSection);

  ColorSectionComplementary = (function(superClass) {
    var base, colors;

    extend(ColorSectionComplementary, superClass);

    function ColorSectionComplementary() {
      return ColorSectionComplementary.__super__.constructor.apply(this, arguments);
    }

    base = tinycolor(ColorSectionComplementary.base).analogous();

    colors = {
      bg: ColorSectionComplementary.dark ? tinycolor(base[0]).darken(45) : tinycolor(base[0]).lighten(44),
      highlight: tinycolor(base[2]).desaturate(ColorSectionComplementary.DESATURATION_AMT / 3),
      highlight2: tinycolor(base[2]).desaturate(ColorSectionComplementary.DESATURATION_AMT),
      interactive: tinycolor(base[3]).saturate(20),
      interactive_brd: base[4]
    };

    ColorSectionComplementary.prototype.applyColors = function() {
      self.$root.find('p, ul, ol, small').clrfy({
        fg: self.colors.fg
      });
      self.$root.find('h1, blockquote, .iconpic').clrfy({
        fg: self.colors.highlight
      });
      self.$root.find('h2, h3, h4, h5, h6').clrfy({
        fg: self.colors.highlight2
      });
      self.$root.find('a').clrfy({
        fg: self.colors.interactive
      });
      return self.$root.find('.btn, button').clrfy({
        bg: self.colors.interactive,
        brd: self.colors.interactive_brd
      });
    };

    ColorSectionComplementary.prototype.exportCSS = function() {
      var css, grad, ramp_distance;
      colors = self.colors;
      ramp_distance = 4;
      grad = dualGradient(tinycolor(self.colors.interactive).lighten(ramp_distance).toHex()(tinycolor(self.colors.interactive).darken(ramp_distance).toHex()));
      css = [
        makeCSSRule('body', {
          color: colors['fg'],
          'background-color': colors['bg']
        }), makeCSSRule('p, ul, ol, small', {
          color: colors['fg']
        }, self.$root.selector), makeCSSRule('h1, blockquote, .iconpic', {
          color: colors['fg']
        }, self.$root.selector), makeCSSRule('h2, h3, h4, h5, h6', {
          color: colors['highlight2']
        }, self.$root.selector), makeCSSRule('a', {
          color: colors['interactive']
        }, self.$root.selector), makeCSSRule('.btn, button', {
          color: colors['fg'],
          '': grad,
          border: self.colors.interactive_brd
        }), '.block'
      ];
      css.join('\n');
      return $('#exported-output').html(css);
    };

    return ColorSectionComplementary;

  })(ColorSection);

  ColorSectionTriadic = (function(superClass) {
    var base, self;

    extend(ColorSectionTriadic, superClass);

    function ColorSectionTriadic() {
      return ColorSectionTriadic.__super__.constructor.apply(this, arguments);
    }

    self = ColorSectionTriadic;

    base = tinycolor(ColorSectionTriadic.base).triad();

    ColorSectionTriadic.colors = {
      bg: ColorSectionTriadic.dark ? tinycolor(base[0]).darken(45) : tinycolor(base[0]).lighten(44),
      fg: tinycolor(base[1]).desaturate(60),
      highlight: tinycolor(base[2]).desaturate(10).lighten(30),
      highlight2: tinycolor(base[2]).desaturate(10).lighten(40),
      interactive: tinycolor(base[2]).saturate(20)
    };

    ColorSectionTriadic.colors['interactive_brd'] = tinycolor(self.colors.interactive).darken(10);

    ColorSectionTriadic.colors['brd'] = tinycolor(self.colors.bg).darken(20);

    ColorSectionTriadic.applyColors = function() {
      self.$root = $(root);
      self.$root.clrfy({
        bg: self.colors.bg,
        brd: self.colors.brd
      });
      self.$root.find('p, ul, ol, small').clrfy({
        fg: self.colors.fg
      });
      self.$root.find('h1, blockquote, .iconpic').clrfy({
        fg: self.colors.highlight
      });
      self.$root.find('h2, h3, h4, h5, h6').clrfy({
        fg: self.colors.highlight2
      });
      self.$root.find('a').clrfy({
        fg: self.colors.interactive
      });
      return self.$root.find('.btn, button').clrfy({
        bg: self.colors.interactive,
        brd: self.colors.interactive_brd
      });
    };

    ColorSectionTriadic.exportCSS = function() {
      var colors, css, ramp_distance;
      colors = self.colors;
      ramp_distance = 4;
      css = [
        makeCSSRule('body', {
          color: colors['fg'],
          'background-color': colors['bg']
        }), makeCSSRule('p, ul, ol, small', {
          color: colors['fg']
        }, self.$root.selector), makeCSSRule('h1, blockquote, .iconpic', {
          color: colors['fg']
        }, self.$root.selector), makeCSSRule('h2, h3, h4, h5, h6', {
          color: colors['highlight2']
        }, self.$root.selector), makeCSSRule('a', {
          color: colors['interactive']
        }, self.$root.selector), makeCSSRule('.btn, button', {
          color: colors['fg'],
          '': dualGradient(tinycolor(self.colors.interactive).lighten(ramp_distance).toHex()(tinycolor(self.colors.interactive).darken(ramp_distance).toHex())),
          border: self.colors.interactive_brd
        }, '.block')
      ];
      css.join('\n');
      return $('#exported-output').html(css);
    };

    return ColorSectionTriadic;

  })(ColorSection);

  ColorSectionPlain = (function(superClass) {
    var SUBDUE_AMT, base, self;

    extend(ColorSectionPlain, superClass);

    function ColorSectionPlain() {
      return ColorSectionPlain.__super__.constructor.apply(this, arguments);
    }

    self = ColorSectionPlain;

    SUBDUE_AMT = 30;

    base = tinycolor(ColorSectionPlain.base).triad();

    ColorSectionPlain.colors = {
      bg: tinycolor(base),
      highlight: ColorSectionPlain.dark ? tinycolor(base[1]).lighten(10) : tinycolor(base[1]).darken(10),
      interactive: tinycolor(base[2]).saturate(100)
    };

    ColorSectionPlain.colors['fg'] = tinycolor(base).isDark() ? 'white' : 'black';

    ColorSectionPlain.colors['highlight2'] = ColorSectionPlain.dark ? tinycolor(self.colors.fg).lighten(SUBDUE_AMT) : tinycolor(self.colors.fg).darken(SUBDUE_AMT);

    ColorSectionPlain.colors['interactive_brd'] = tinycolor(self.colors.interactive).darken(10);

    ColorSectionPlain.colors['brd'] = tinycolor(self.colors.bg).darken(20);

    ColorSectionPlain.applyColors = function() {
      self.$root.clrfy({
        bg: self.colors.bg,
        brd: self.colors.brd
      });
      self.$root.find('p, ul, ol, small, h1, blockquote, .iconpic').clrfy({
        fg: self.colors.fg
      });
      self.$root.find('h2, h3, h4, h5, h6').clrfy({
        fg: self.colors.highlight2
      });
      self.$root.find('a').clrfy({
        fg: self.colors.interactive
      });
      return self.$root.find('.btn, button').clrfy({
        bg: self.colors.interactive,
        brd: self.colors.interactive_brd
      });
    };

    return ColorSectionPlain;

  })(ColorSection);

  ColorSectionGrayScale = (function(superClass) {
    var BRIGHTNESS_AMT, MAX_SHADES, SUBDUE_AMT, bases, self;

    extend(ColorSectionGrayScale, superClass);

    function ColorSectionGrayScale() {
      return ColorSectionGrayScale.__super__.constructor.apply(this, arguments);
    }

    self = ColorSectionGrayScale;

    BRIGHTNESS_AMT = 50;

    SUBDUE_AMT = 30;

    MAX_SHADES = 6;

    bases = tinycolor().monochromatic(MAX_SHADES);

    ColorSectionGrayScale.colors = {
      bg: ColorSectionGrayScale.dark ? bases[0] : bases[MAX_SHADES - 1],
      highlight: ColorSectionGrayScale.dark ? tinycolor('white').darken(BRIGHTNESS_AMT / 2) : tinycolor('black').lighten(BRIGHTNESS_AMT / 2),
      interactive: ColorSectionGrayScale.dark ? 'white' : 'black'
    };

    ColorSectionGrayScale.colors['fg'] = ColorSectionGrayScale.dark ? tinycolor(self.colors.fg).darken(BRIGHTNESS_AMT) : tinycolor(self.colors.fg).lighten(BRIGHTNESS_AMT);

    ColorSectionGrayScale.colors['highlight2'] = ColorSectionGrayScale.dark ? tinycolor(self.colors.fg).lighten(SUBDUE_AMT) : tinycolor(self.colors.fg).darken(SUBDUE_AMT);

    ColorSectionGrayScale.colors['interactive_brd'] = tinycolor(self.colors.interactive).darken(10);

    ColorSectionGrayScale.colors['brd'] = tinycolor(self.colors.bg).darken(20);

    ColorSectionGrayScale.applyColors = function() {
      self.$root = $(self.root);
      self.$root.clrfy({
        bg: self.colors.bg,
        brd: self.colors.brd
      });
      self.$root.find('p, ul, ol, small, h1, blockquote, .iconpic').clrfy({
        fg: self.colors.fg
      });
      self.$root.find('h2, h3, h4, h5, h6').clrfy({
        fg: self.colors.highlight2
      });
      self.$root.find('a').clrfy({
        fg: self.colors.interactive
      });
      return self.$root.find('.btn, button').clrfy({
        bg: self.colors.interactive,
        brd: self.colors.interactive_brd
      });
    };

    return ColorSectionGrayScale;

  })(ColorSection);

}).call(this);
